package service;

import model.*;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;


public class ApplianceService {
	private final FileHandler fileHandler;
	private final ApplianceParser parser;
	private final List<Appliance> appliances;
	
	public ApplianceService(FileHandler fileHandler, ApplianceParser parser) {
		this.fileHandler = fileHandler;
		this.parser = parser;
		this.appliances = new ArrayList<>();
		
		try {
            loadAppliance();
        } catch (IOException e) {
            throw new RuntimeException("Failed to load appliances: " + e.getMessage(), e);
        }
	}
	
	public boolean loadAppliance() throws IOException {
		List<String> lines = fileHandler.getStrings();
		List<Appliance> parsedAppliances = parser.parseAppliance(lines);
		appliances.clear();
		appliances.addAll(parsedAppliances);
		return true;
	}
	
//	I don't want to manually call the loadAppliance myself, i prefer it done on service creation
	
	public Appliance checkOut(String itemNumber) {
        for (Appliance appliance : appliances) {
            if (appliance.itemNumber().equals(itemNumber)) {
                appliance.setQuantity(appliance.quantity() - 1);
                return appliance;
            }
        }
        return null;
    }
	
	
	public List<Appliance> findByBrand(String brand) {
		List<Appliance> results = new ArrayList<>();
		
		for (Appliance appliance : appliances) {
			if(appliance.brand() == brand) {
				results.add(appliance);
			}
		}
		return results;
	}
	
	public List<Appliance> findByType(int type, Map<String, Object> criteria) {
		List<Appliance> result = new ArrayList<>();
		for (Appliance appliance: appliances) {
			if (applianceTypeMatches(type, appliance) && appliance.matchesCriteria(criteria)) {
				result.add(appliance);
			}
		}
		return result;
	}
	
	private boolean applianceTypeMatches(int type, Appliance appliance) {
		return switch (type) {
			case 1 -> appliance instanceof Refrigerator;
			case 2 -> appliance instanceof Vacuum;
			case 3 -> appliance instanceof Microwave;
			case 4 -> appliance instanceof Dishwasher;
			default -> false;
		};
	}
	
	public List<Appliance> getRandom(int count) {
		if (count <= 0 || count > appliances.size()) {
			throw new IllegalArgumentException("Invalid Count: " + count);
		}
		List<Appliance> shuffled = new ArrayList<>(appliances);
		Collections.shuffle(shuffled);
		return shuffled.subList(0, count);
	}
	
	public boolean saveToFile() {
		List<String> applianceStrings = new ArrayList<>();
		for (Appliance appliance: appliances) {
			applianceStrings.add(appliance.toFileFormat());
		}
		
		try {
			fileHandler.storeStrings(applianceStrings);
			return true;
		} catch (IOException e) {
			System.err.println("Failed to save appliances: " + e.getMessage());
            return false;
		}
	}
	
}
